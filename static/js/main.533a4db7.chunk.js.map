{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","PureComponent","connect","searchRobots","requsetRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","intialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.533a4db7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({ id, name, email }) {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 graw bw2 shadow-5'>\t\r\n\t\t\t<img src={`https://robohash.org/${name}?200*200`} alt='photo' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n\tconst cardArray = robots.map((user, i) => {\r\n\t\treturn <Card key={robots[i].name} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t})\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ \r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robots[i].name} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchChange}) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-light-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nfunction Scroll(props) {\r\n\treturn(\r\n\t\t<div style={{overflow: 'auto', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nclass ErrorBoundry extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>;\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t\tconsole.log('hello hasError');\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","// import React from 'react';\r\nimport React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requsetRobots.robots,\r\n\t\tisPending: state.requsetRobots.isPending,\r\n\t\terror: state.requsetRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\nclass App extends PureComponent {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\r\n\t\tif(isPending) {\r\n\t\t\treturn <h1 className='tc'>Loading...</h1>\r\n\t\t} else {\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>robot-search</h1>\r\n\t\t\t\t\t<SearchBox  searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\nimport { act } from 'react-dom/test-utils';\r\n\r\nconst intialStateSearch = {\r\n\tsearchField: ''\r\n}\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\terror: '',\r\n\trobots: []\r\n}\r\nexport const requsetRobots = (state=initialStateRobots, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requsetRobots } from './reducers'\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requsetRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk));\n\nReactDOM.render(\n\t  <Provider store={store}>\n\t\t\t<App />\n\t  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}